plugins {
    id("com.github.spotbugs") version "4.7.1"
    id "java-library"
    id "maven-publish"
    id "checkstyle"
    id "signing"
    id "jacoco"
    id "pmd"
}

description = "Simple LDAP"
group = "ninja.javahacker"
version = "1.1.0-2021.08.24"

def artifactName = "simpleldap"
def moduleName = "ninja.javahacker.simpleldap"

def versionJavaCompiler = "10"
def doclint = true

def versionApiguardian = "1.1.1"
def versionCheckstyle = "8.42"
def versionSbContrib = "7.4.7"
def versionFindSecBugs = "1.11.0"
def versionJaCoCo = "0.8.6"
def versionJcip = "1.0"
def versionJunit = "5.8.0-M1"
def versionJsr305 = "3.0.2"
def versionPmd = "6.34.0"
def versionReifiedGenerics = "1.1.0-2021.08.24"
def versionSpotBugs = "4.2.3"

dependencies {

    // JUnit
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: versionJunit)
    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: versionJunit)
    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-params", version: versionJunit)
    testCompileOnly(group: "org.apiguardian", name: "apiguardian-api", version: versionApiguardian)

    // PMD
    compileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd
    testCompileOnly group: 'net.sourceforge.pmd', name: 'pmd', version: versionPmd

    // Reified-Generics
    api(group: "ninja.javahacker", name: "reified-generic", version: versionReifiedGenerics)

    // SpotBugs + plugins
    spotbugs(group: "com.github.spotbugs", name: "spotbugs", version: versionSpotBugs)
    spotbugs(configurations.spotbugsPlugins.dependencies)
    compileOnlyApi(group: "net.jcip", name: "jcip-annotations", version: versionJcip)
    compileOnlyApi(group: "com.github.spotbugs", name: "spotbugs-annotations", version: versionSpotBugs)
    testCompileOnly(group: "net.jcip", name: "jcip-annotations", version: versionJcip)
    testCompileOnly(group: "com.github.spotbugs", name: "spotbugs-annotations", version: versionSpotBugs)
    spotbugsPlugins(group: "com.h3xstream.findsecbugs", name: "findsecbugs-plugin", version: versionFindSecBugs)
    spotbugsPlugins(group: "com.mebigfatguy.sb-contrib", name: "sb-contrib", version: versionSbContrib)
}

// Do not change anything below here.

println("Using Java " + org.gradle.api.JavaVersion.current() + ".")

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    mavenCentral()
}

configurations.compileOnlyApi.setCanBeResolved(true)
configurations.implementation.setCanBeResolved(true)
configurations.testCompileOnly.setCanBeResolved(true)
configurations.testImplementation.setCanBeResolved(true)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.debug = true
    options.fork = true
    options.compilerArgs << "-parameters" << "-Xlint:all,-processing,-requires-transitive-automatic,-requires-automatic,-missing-explicit-ctor"
}

compileJava {
    sourceCompatibility = versionJavaCompiler
    targetCompatibility = versionJavaCompiler
    if (doclint) {
        options.compilerArgs << "-Xdoclint:all/protected"
    } else {
        options.compilerArgs << "-Xdoclint:none"
    }
    doFirst {
        //println("\nClasspath + Modulepath compileOnly:;${configurations.compileOnlyApi.asPath}".replaceAll(";+", ";").replace(";", "\n   "))
        //println("\nClasspath + Modulepath implementation:;${configurations.implementation.asPath}".replaceAll(";+", ";").replace(";", "\n   "))
        options.compilerArgs += [
            "--module-path", "${configurations.compileOnlyApi.asPath};${configurations.implementation.asPath}".replaceAll(";+", ";")
        ]
        classpath = files()
    }
}

compileTestJava {
    sourceCompatibility = org.gradle.api.JavaVersion.current()
    targetCompatibility = org.gradle.api.JavaVersion.current()
    options.compilerArgs << "-Xdoclint:none"
    /*doFirst {
        println("\nClasspath + Modulepath testCompileOnlyApi:;${configurations.testCompileOnly.asPath}\n".replaceAll(";+", ";").replace(";", "\n   "))
        println("\nClasspath + Modulepath testImplementation:;${configurations.testImplementation.asPath}\n".replaceAll(";+", ";").replace(";", "\n   "))
        options.compilerArgs += [
            "--module-path", "${configurations.testCompileOnly.asPath};${configurations.testImplementation.asPath}".replaceAll(";+", ";")
        ]
        classpath = files()
    }*/
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    options.docEncoding = "UTF-8"
    options.docTitle = "${project.name} API"
    options.windowTitle = "${project.name} API"
    options.header = "<b>${project.name}</b>"
    options.addBooleanOption("html5", true)
    options.tags = ["apiNote:a:API Note:", "implSpec:a:Implementation Requirements:", "implNote:a:Implementation Note:"]
    doFirst {
        options.modulePath += classpath
        classpath = files()
    }
}

checkstyleMain {
    configFile = rootProject.file("${rootDir}/config/checkstyle/main.xml")
}

checkstyleTest {
    configFile = rootProject.file("${rootDir}/config/checkstyle/test.xml")
}

checkstyle {
    toolVersion = versionCheckstyle
    configProperties = [
        "checkstyle.cache.file": "${buildDir}/checkstyle.cache",
    ]
    ignoreFailures = true
    showViolations = true
}

pmd {
    toolVersion = versionPmd
    ignoreFailures = true
}

spotbugs {
    toolVersion = versionSpotBugs
    effort = "max"
    reportLevel = "low"
    omitVisitors = ["WeakExceptionMessaging", "OverlyPermissiveMethod"]
    ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required = false
        html.required = true
    }
}

jar {
    archiveBaseName = artifactName
    duplicatesStrategy = "exclude"
    inputs.property("moduleName", moduleName)
    manifest {
        attributes("Automatic-Module-Name": moduleName)
    }
}

task sourcesJar(type: Jar) {
    from(sourceSets.main.allSource)
    classifier = "sources"
}

task javadocJar(type: Jar) {
    from(javadoc)
    classifier = "javadoc"
}

test {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
    ignoreFailures = true
}

jacoco {
    toolVersion = versionJaCoCo
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required = false
        csv.required = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = artifactName
            from(components.java)
            artifact(sourcesJar)
            artifact(javadocJar)
            pom {
                developers {
                    developer {
                        name = "Victor Williams Stafusa da Silva"
                        email = "victorwssilva@gmail.com"
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

spotbugsTest.enabled = false
pmdTest.enabled = false